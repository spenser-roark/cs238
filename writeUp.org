
* Sweetness

** Introduction
The purpose of this assignment was to find the "sweetest" c value for the 
Euler function for finding probable primes. x^2 +x + c But what constitutes sweetness?
Is it the number of primes found? Or the distribution of primes over the range?
Or could it be the chances that a given value from the Euler function is actually prime?

** My Sweetest Choice
After some consideration I decided that the sweetness of prime was dependant
upon what you needed. There are times that what you need is as many 
prime like numbers as possible within a given range. Other times you 
need to be certain that the number you are given is, in fact, prime.
For my purposes I choose to consider the sweetest value to be the one
that gave me the the highest odds of a value actually being prime.
Sweetness = right_answers / total_answers

Of course it is not possible to try and check every prime in existence.
This is because it is very difficult to find primes in the first place and
computers have limited resources. So I choose to only check for values 
within the range of 0-10000. Values that are returned from the Euler
function are compared to values found on a table of primes that was
generated using the Sieve of Eratosthenes.

** My Results
The following code will find the sweetest Euler function.
#+BEGIN_SRC emacs-lisp
	
(defun main(range)
(progn
(require 'cl)
"this function will load and run exploration 1"
(load "~/git/cs238/getPrimes.lsp")
(load "~/git/cs238/eulerFunction.lsp")
(print "functions loaded")

; run getPrimes method to get a bool-vector of prime numbers
(print "getting primes")
;(setq range 10000)
(setq sqRange (sqrt range))
(setq actualPrimes (getPrimes range))
(print "got primes")

; count the number of primes in the actualPrimes list

  ; keep track of the number the eurler function got wrong and right
(setq right 0)
(setq wrong 0)

; run the euler-like function to get a list of possible primes
(print "running euler")
(setq bestC -1)
(setq sweetness -1)
(setq sweetestRatio -1.0)
(dotimes (c sqRange)

 ; keep track of the number the eurler function got wrong and right
(setq right 0)
(setq wrong 0)
  ; this list will be filled with all of the values found by the euler function
  (setq possiblePrimes (make-list 0 0))
  ; for 0 to 100
  (dotimes (x sqRange)
    ; get the euler function's absolute value for x and c
    (setq value (abs (euler x c)))
    ; check to see if this value has already been found
    (setq found (find '(value) possiblePrimes))
    (unless found
      ; if this value has not been found, add it to the possible primes list
      (setq junklist (make-list 1 value))
      (setq possiblePrimes (append junklist possiblePrimes))

	 ; then check to see if it is a correct prime
         (if (elt actualPrimes value)
	   (setq right (+ right 1)) ; if true
	   (setq wrong (+ wrong 1))   ; if false
	 )
    )
  )
  ; check the sweetness here
  ; we will define sweetness as how many primes were found 
  ; over the total given primes

(setq ratio (/ (coerce right 'float) (coerce (+ right wrong) 'float)))
  (if (> ratio sweetestRatio)
      (progn 
       (print "")
	(print "new best c")
       (setq bestC c)
       (setq sweetness right)
       (setq sweetestRatio ratio)

       (print "right")
       (print right)
       (print "wrong")
       (print wrong)
       (print "bestC")
       (print bestC)
       (print "c")
       (print c)
       (print "sweetestRatio")
       (print sweetestRatio)

      )
  )
)
	 
(print "the best c was")
(print bestC)
(print "the number of primes found was")
(print sweetness)
(print "The bestC was")
(print bestC)
    bestC
)
)

#+END_SRC

After running this code with the range of 10000, the sweetest value 
is the number 58 with a probability of 41% to give you a correct prime. 

** How to run this code from a Linux terminal.
The following is the command you need to run in order to run it from a linux terminal.

#+BEGIN_SRC emacs-lisp

emacs --batch -l exploration1.lsp -eval '(main 10000)'

#+END_SRC

Note that in order to run the code, the path of the "main" functions
requried files must be changed to the location on the files on the local system.
